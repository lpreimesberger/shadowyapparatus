name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create a release (true/false)'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write  # Required for Sigstore/Cosign
  attestations: write

jobs:
  build:
    name: Build for Linux x64
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version calculation
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Calculate version
      id: version
      run: |
        # Base version
        BASE_VERSION="0.1"
        
        # Calculate build number (commits since first commit)
        BUILD_NUMBER=$(git rev-list --count HEAD)
        
        # Full version with build number
        FULL_VERSION="${BASE_VERSION}+${BUILD_NUMBER}"
        
        # Short commit hash
        COMMIT_SHA=$(git rev-parse --short HEAD)
        
        echo "version=${FULL_VERSION}" >> $GITHUB_OUTPUT
        echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
        echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
        
        echo "Version: ${FULL_VERSION}"
        echo "Build: ${BUILD_NUMBER}"
        echo "Commit: ${COMMIT_SHA}"
        
    - name: Run tests
      run: |
        go mod tidy
        go test -v ./...
        
    - name: Build binary
      env:
        CGO_ENABLED: 0
        GOOS: linux
        GOARCH: amd64
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT_SHA="${{ steps.version.outputs.commit_sha }}"
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build with version info
        go build \
          -ldflags="-s -w -X main.Version=${VERSION} -X main.GitCommit=${COMMIT_SHA} -X main.BuildTime=${BUILD_TIME}" \
          -o shadowy-linux-amd64 \
          .
          
        # Make executable
        chmod +x shadowy-linux-amd64
        
        # Get file info
        ls -la shadowy-linux-amd64
        file shadowy-linux-amd64
        
    - name: Generate checksums
      run: |
        sha256sum shadowy-linux-amd64 > shadowy-linux-amd64.sha256
        sha512sum shadowy-linux-amd64 > shadowy-linux-amd64.sha512
        md5sum shadowy-linux-amd64 > shadowy-linux-amd64.md5
        
        echo "Generated checksums:"
        cat shadowy-linux-amd64.sha256
        cat shadowy-linux-amd64.sha512
        cat shadowy-linux-amd64.md5
        
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.3'
        
    - name: Sign binary with Cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        # Sign the binary
        cosign sign-blob \
          --bundle shadowy-linux-amd64.cosign.bundle \
          shadowy-linux-amd64
          
        # Sign the checksums
        cosign sign-blob \
          --bundle shadowy-linux-amd64.sha256.cosign.bundle \
          shadowy-linux-amd64.sha256
          
        echo "Signature bundles created:"
        ls -la *.cosign.bundle
        
    - name: Verify signatures
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        # Verify binary signature
        cosign verify-blob \
          --bundle shadowy-linux-amd64.cosign.bundle \
          --certificate-identity-regexp ".*" \
          --certificate-oidc-issuer-regexp ".*" \
          shadowy-linux-amd64
          
        # Verify checksum signature  
        cosign verify-blob \
          --bundle shadowy-linux-amd64.sha256.cosign.bundle \
          --certificate-identity-regexp ".*" \
          --certificate-oidc-issuer-regexp ".*" \
          shadowy-linux-amd64.sha256
          
        echo "✅ All signatures verified successfully"
        
    - name: Create SBOM (Software Bill of Materials)
      run: |
        # Install syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Generate SBOM
        syft packages . -o spdx-json=shadowy-sbom.spdx.json
        syft packages . -o cyclonedx-json=shadowy-sbom.cyclonedx.json
        
        echo "Generated SBOM files:"
        ls -la shadowy-sbom.*
        
    - name: Sign SBOM
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        # Sign SBOM files
        cosign sign-blob \
          --bundle shadowy-sbom.spdx.json.cosign.bundle \
          shadowy-sbom.spdx.json
          
        cosign sign-blob \
          --bundle shadowy-sbom.cyclonedx.json.cosign.bundle \
          shadowy-sbom.cyclonedx.json
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shadowy-linux-amd64-${{ steps.version.outputs.version }}
        path: |
          shadowy-linux-amd64
          shadowy-linux-amd64.*
          shadowy-sbom.*
        retention-days: 30
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      (startsWith(github.ref, 'refs/tags/v') || 
       github.ref == 'refs/heads/main' || 
       github.ref == 'refs/heads/master' ||
       github.event.inputs.force_release == 'true')
       
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: shadowy-linux-amd64-${{ needs.build.outputs.version }}
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        cd artifacts
        
        # Create compressed archives
        tar -czf shadowy-linux-amd64-${{ needs.build.outputs.version }}.tar.gz shadowy-linux-amd64
        zip shadowy-linux-amd64-${{ needs.build.outputs.version }}.zip shadowy-linux-amd64
        
        # List all files
        echo "Release artifacts:"
        ls -la
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.build.outputs.version }}"
        BUILD_NUMBER="${{ needs.build.outputs.build_number }}"
        
        cat > release_notes.md << 'EOF'
        # Shadowy Blockchain Release ${{ needs.build.outputs.version }}
        
        ## 🚀 What's New
        
        This release includes the complete Shadowy blockchain implementation with:
        
        ### ✨ Features
        - **Proof-of-Storage Consensus**: Energy-efficient mining using storage space
        - **Bitcoin-style Tokenomics**: 21M SHADOW max supply with halving every 210,000 blocks
        - **Multi-node P2P Network**: Full consensus and synchronization between peers
        - **Mining & Farming**: Plot-based storage mining with 10-minute block times
        - **Web3 Compatible**: Complete transaction and wallet management
        - **RESTful API**: Comprehensive HTTP API for all blockchain operations
        
        ### 🔧 Components
        - **Blockchain Engine**: Core ledger with proof-of-storage validation
        - **Consensus System**: Peer-to-peer network with automatic synchronization
        - **Mining System**: Plot-based mining with deflationary rewards
        - **Mempool**: Transaction pool with priority-based selection
        - **Wallet System**: HD wallet support with address generation
        - **API Server**: Complete REST API with health monitoring
        
        ### 📊 Build Information
        - **Version**: ${{ needs.build.outputs.version }}
        - **Build**: #${{ needs.build.outputs.build_number }}
        - **Platform**: Linux x86_64
        - **Go Version**: $(go version | cut -d' ' -f3)
        - **Commit**: ${{ github.sha }}
        
        ### 🔐 Security
        - All binaries are signed with [Sigstore/Cosign](https://www.sigstore.dev/)
        - SBOM (Software Bill of Materials) included
        - SHA256, SHA512, and MD5 checksums provided
        - Signatures can be verified using the public Sigstore infrastructure
        
        ### 📥 Installation
        
        ```bash
        # Download and verify
        wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.build.outputs.version }}/shadowy-linux-amd64
        wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.build.outputs.version }}/shadowy-linux-amd64.sha256
        
        # Verify checksum
        sha256sum -c shadowy-linux-amd64.sha256
        
        # Make executable
        chmod +x shadowy-linux-amd64
        
        # Run
        ./shadowy-linux-amd64 --help
        ```
        
        ### 🔍 Signature Verification
        
        ```bash
        # Install cosign
        go install github.com/sigstore/cosign/v2/cmd/cosign@latest
        
        # Verify signature
        cosign verify-blob \
          --bundle shadowy-linux-amd64.cosign.bundle \
          --certificate-identity-regexp ".*" \
          --certificate-oidc-issuer-regexp ".*" \
          shadowy-linux-amd64
        ```
        
        ### 🚀 Quick Start
        
        ```bash
        # Start a mining node
        ./shadowy-linux-amd64 node
        
        # Create a wallet
        ./shadowy-linux-amd64 wallet create my-wallet
        
        # Start farming with plots
        ./shadowy-linux-amd64 farm --plot-dir ./plots
        
        # Check mining status
        curl http://localhost:8080/api/v1/mining
        ```
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.build.outputs.base_version }}...v${{ needs.build.outputs.version }}
        EOF
        
        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: Shadowy Blockchain v${{ needs.build.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        generate_release_notes: true
        files: |
          artifacts/shadowy-linux-amd64
          artifacts/shadowy-linux-amd64.tar.gz
          artifacts/shadowy-linux-amd64.zip
          artifacts/shadowy-linux-amd64.sha256
          artifacts/shadowy-linux-amd64.sha512
          artifacts/shadowy-linux-amd64.md5
          artifacts/shadowy-linux-amd64.cosign.bundle
          artifacts/shadowy-linux-amd64.sha256.cosign.bundle
          artifacts/shadowy-sbom.spdx.json
          artifacts/shadowy-sbom.cyclonedx.json
          artifacts/shadowy-sbom.spdx.json.cosign.bundle
          artifacts/shadowy-sbom.cyclonedx.json.cosign.bundle
          
    - name: Update latest release
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "Tagged release v${{ needs.build.outputs.version }} created"
        echo "This will be marked as the latest release"
        
  security-scan:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: shadowy-linux-amd64-${{ needs.build.outputs.version }}
        path: ./artifacts
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Scan binary with Trivy
      run: |
        # Scan the built binary
        trivy fs artifacts/shadowy-linux-amd64 --format table
        
  docker-build:
    name: Build Container Image
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: shadowy-linux-amd64-${{ needs.build.outputs.version }}
        path: ./artifacts
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}},value=v${{ needs.build.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=v${{ needs.build.outputs.version }}
          type=sha
          
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM scratch
        
        # Copy the binary
        COPY artifacts/shadowy-linux-amd64 /shadowy
        
        # Expose ports
        EXPOSE 8080 8888 9090
        
        # Set entrypoint
        ENTRYPOINT ["/shadowy"]
        CMD ["node"]
        EOF
        
    - name: Build and push container image
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Sign container image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        # Sign the container image
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        
    - name: Generate SBOM for container
      run: |
        # Install syft
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Generate container SBOM
        syft packages ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }} \
          -o spdx-json=container-sbom.spdx.json
          
    - name: Attest SBOM
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        # Attest the SBOM to the container image
        cosign attest --yes \
          --predicate container-sbom.spdx.json \
          --type spdxjson \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}